// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/account/domain/gateway/entry_repository.go

// Package mock_gateway_account is a generated GoMock package.
package mock_gateway_account

import (
	entity "bank_server/internal/account/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEntryrepositoryInterface is a mock of EntryrepositoryInterface interface.
type MockEntryrepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEntryrepositoryInterfaceMockRecorder
}

// MockEntryrepositoryInterfaceMockRecorder is the mock recorder for MockEntryrepositoryInterface.
type MockEntryrepositoryInterfaceMockRecorder struct {
	mock *MockEntryrepositoryInterface
}

// NewMockEntryrepositoryInterface creates a new mock instance.
func NewMockEntryrepositoryInterface(ctrl *gomock.Controller) *MockEntryrepositoryInterface {
	mock := &MockEntryrepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockEntryrepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryrepositoryInterface) EXPECT() *MockEntryrepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEntryrepositoryInterface) Create(entry *entity.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEntryrepositoryInterfaceMockRecorder) Create(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEntryrepositoryInterface)(nil).Create), entry)
}

// Get mocks base method.
func (m *MockEntryrepositoryInterface) Get(id string) (*entity.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEntryrepositoryInterfaceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEntryrepositoryInterface)(nil).Get), id)
}

// List mocks base method.
func (m *MockEntryrepositoryInterface) List(accountID string, limit, offset int) ([]*entity.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", accountID, limit, offset)
	ret0, _ := ret[0].([]*entity.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEntryrepositoryInterfaceMockRecorder) List(accountID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEntryrepositoryInterface)(nil).List), accountID, limit, offset)
}
